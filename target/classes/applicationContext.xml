<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- Spring 的配置文件，这里主要配置和业务逻辑有关的 -->
	<!-- 数据源，事务控制，..... -->
	<context:component-scan base-package="cn.fanqisoft">
	<!-- 和SpringMVC配置文件的不同 ，Spring的配置文件除了包含@Controller注解的不要其余的全部包含进来 -->
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
	<!-- 引入外部文件 初始化DataSource -->
	<context:property-placeholder location="classpath:db.properties"/>
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="user" value="${jdbc.user}"></property>
		<property name="password" value="${jdbc.password}"></property>
		<property name="driverClass" value="${jdbc.driverClass}"></property>
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
	</bean>
	
	
	<!-- 配置和MyBatis的整合  -->
	<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 指定MyBatis的全局配置文件的位置  -->
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
		<!-- 指定MyBatis的数据源 -->
		<property name="dataSource" ref="dataSource"></property> 
		<!-- 指定MyBatis mapper文件的位置 -->
		<property name="mapperLocations" value="classpath:mapper/*.xml"></property>	
	</bean>
	
	<!-- 配置扫描器，将mybatis接口的实现加入到 IOC容器中 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 扫描所有Dao接口的实现，加入到IOC容器中 -->
		<property name="basePackage" value="cn.fanqisoft.crud.dao"></property>
	</bean>
	
	<!-- 配置一个可以执行批量操作的sqlSession  -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactoryBean"></constructor-arg>
		<constructor-arg name="executorType" value="BATCH"></constructor-arg>
	</bean>
	
	<!-- 事务控制的配置 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- 控制住数据源 -->
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- 开启基于注解的事务，使用XML配置形式的事务（必要主要的都是使用配置式） -->
	
	<aop:config>
		<!-- 切入点表达式 -->
		<aop:pointcut expression="execution(* cn.fanqisoft.crud.service..*(..))" 
		id="txPoint"/>
		<!-- 配置事务增强 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
	</aop:config>
	
	 <!-- 配置事务增强，具体也就是事务如何切入 -->
	 <tx:advice id="txAdvice" transaction-manager="transactionManager">
	 	<tx:attributes>
	 		<!-- * 的意思是指所有方法都是事务方法 -->
	 		<tx:method name="*"/>
	 		<!-- 以get开头的所有方法可以设置read-only属性，因为只查询不做其它数据方面的操作可以让数据库引擎更好的优化数据 -->
	 		<tx:method name="get*" read-only="true"/>
	 	</tx:attributes>
	 </tx:advice>
	 
	 <!-- Spring配置文件的核心点（数据源，与MyBatis的整合，事务控制） -->
</beans>
